TRS80 Model 4/4P
(or right now more accurately sdltrs/xtrs)

Emulator Bugs:
	The emulator is horribly insecure, it's default is to allow all
	sorts of direct access to things. Even if you turn this off I've
	had it segfault with FUZIX bugs which suggests its not too secure.

	Repeating instructions like LDIR appear to be misemulated. LDIR
	is performed an emulated block copy, not as an iterated LDI. The
	real processor actually implements LDIR as  "LDI, if not done
	PC -= 2". FUZIX doesn't do any overlapped LDIR tricks so shouldn't
	be affected.

Requirements: 
	128K RAM fitted
	Hard disk drive (will be used for swap), or a suitable memory
	expander board could be used with a bit of tweaking (or both!)
	*** NOTE: the current code will simply swap blindly all over the first
	hard disk ***

Memory Map:
	Base memory 0-FFFF (with a fair bit of slack) is used for the kernel
	User processes run 0-7FFF in bank U64L32 or U64U32, in both cases
	with the upper 32K being kept as the kernel bank.

	It would be good to support 64K processes using the bank32 model.
	Before that can be done however the TRS80 will need a custom
	user copy function to deal with access to the upper 32K by mapping
	it low instead. It will also need the location of the uarea stash to
	be binary size dependent. Swapper write out is also fairly hairy
	for the same reasons. So for now we just handle a pair of 32K
	processes.

	Processes that don't fit are swapped to hard disk. Without swap you
	can run a pair of 32K processes, just enough for stuff like
	bootstrap.

Drivers:
	80 column display is done
	Keyboard is done
	Floppy and Hard disk are done and minimally tested
	Floppy drivers do not yet deal with double sided disks or sd/dd
	media detection
	Hard disk needs to read block 0, and handle partitions of some form
	including finding where 'swap' lives

Adding Support For Other Banked RAM:
	See trs80.s, and the various map_* functions. These can be extended
	to use U_DATA__U_PAGE+1 to carry a second byte of data. The
	main.c for the platform sets up the pagemaps as a 16bit value
	which currently is just the opreg bits for the two banks.

	map_save/restore will also need to handle any sub banking
	arrangement.

	Finally up MAX_BANKS in platform/config.h accordingly.


Setting It Up

	# Tool to make disk images
	make tools/makejv3
	# Double density single sided 40 track boot disk
	tools/makejv3 dd40s /dev/zero mydisk.jv3
	# Build boot block (not yet converted to sdasz80)
	zmac platform-trs80/trs80load.s
	# Build kernel (edit Makefile, set target then)
	make
	# Add pieces to the disk (boot block in sector 0, kernel at end)
	dd if=zout/trs80load.cim of=mydisk.jv3 bs=1 seek=8704 conv=notrunc
	dd if=fuzix.bin of=mydisk.jv3 bs=1 seek=142336 conv=notrunc
	# Once we get that far you can also put a filesystem in the lower
	# blocks
	#
	sdltrs -emtsafe -disk0 mydisk.jv3 -model 4p
	#
	# and remember to mark the fd volume as writeable
